package com.complaint.management.controller;

import java.text.ParseException;
import java.text.SimpleDateFormat;
import java.util.Date;

import org.springframework.beans.factory.annotation.Autowired;
import org.springframework.stereotype.Controller;
import org.springframework.ui.Model;
import org.springframework.web.bind.annotation.GetMapping;
import org.springframework.web.bind.annotation.ModelAttribute;
import org.springframework.web.bind.annotation.PostMapping;
import org.springframework.web.bind.annotation.RequestMapping;
import org.springframework.web.bind.annotation.RequestParam;

import com.complaint.management.model.TicketDTO;
import com.complaint.management.repository.DepartmentRepository;
import com.complaint.management.service.DepartmentService;
import com.complaint.management.service.TicketService;

@Controller
@RequestMapping("ticket")
public class TicketController {
	
	@Autowired
	TicketService ticketService;
	
	@Autowired
	DepartmentService departmentService;
	
	@Autowired
	DepartmentRepository departmentRepository;
	
	private static SimpleDateFormat formatter = new SimpleDateFormat("yyyy-MM-dd");

	@GetMapping("add")
	public String add(Model model) {
		TicketDTO ticket = new TicketDTO();
		model.addAttribute("ticket", ticket);
		model.addAttribute("departments", departmentRepository.findAll());
		return "ticket/add";
	}
	
	@PostMapping("add")
	public String add(@ModelAttribute TicketDTO ticket,
			@RequestParam("department_id") int departmentID) {
		Date currentDate = new Date();
		formatter.format(currentDate);
		ticket.setDateCreate(currentDate);
		ticket.setDepartment(departmentRepository.findById(departmentID).orElse(null));
		ticketService.addTicket(ticket);
		return "ticket";
	}
	
	@GetMapping("edit")
	public String edit(Model model, @RequestParam int id) {
		TicketDTO ticket = ticketService.getTicket(id);
		model.addAttribute("ticket", ticket);
		model.addAttribute("departments", departmentRepository.findAll());
		return "ticket/edit";
	}
	
	@PostMapping("edit")
	public String edit(@ModelAttribute TicketDTO ticket,
			@RequestParam("department_id") int departmentID,
			@RequestParam("date_create") String dateCreate,
			@RequestParam("original_date") String originalDate) throws ParseException {
		
		if (!dateCreate.equals("")) {
			ticket.setDateCreate(formatter.parse(dateCreate));
		} else {
			ticket.setDateCreate(formatter.parse(originalDate));
		}
		ticket.setDepartment(departmentService.getDepartment(departmentID));
		ticketService.updateTicket(ticket);
		return "ticket/edit";
	}
	
	@GetMapping("delete")
	public String delete(@RequestParam int id) {
		ticketService.deleteTicket(id);
		return "ticket/delete";
	}
}
