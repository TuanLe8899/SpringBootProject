package com.complaint.management.api;

import java.text.ParseException;
import java.text.SimpleDateFormat;
import java.util.ArrayList;
import java.util.Date;
import java.util.List;

import org.springframework.beans.factory.annotation.Autowired;
import org.springframework.data.domain.Page;
import org.springframework.data.domain.PageRequest;
import org.springframework.data.domain.Pageable;
import org.springframework.data.domain.Sort;
import org.springframework.data.domain.Sort.Direction;
import org.springframework.web.bind.annotation.DeleteMapping;
import org.springframework.web.bind.annotation.GetMapping;
import org.springframework.web.bind.annotation.PathVariable;
import org.springframework.web.bind.annotation.PostMapping;
import org.springframework.web.bind.annotation.PutMapping;
import org.springframework.web.bind.annotation.RequestBody;
import org.springframework.web.bind.annotation.RequestMapping;
import org.springframework.web.bind.annotation.RequestParam;
import org.springframework.web.bind.annotation.RestController;
import org.thymeleaf.util.StringUtils;

import com.complaint.management.entity.Department;
import com.complaint.management.model.DepartmentDTO;
import com.complaint.management.repository.DepartmentRepository;
import com.complaint.management.service.DepartmentService;

@RestController
@RequestMapping("department")
public class DepartmentAPI {
	
	@Autowired
	DepartmentService departmentService;
	
	@Autowired 
	DepartmentRepository departmentRepository;
	
	private static SimpleDateFormat formatter = new SimpleDateFormat("yyyy-MM-dd");
	
	@GetMapping("departmentnamecontains")
	public List<Department> get1(@RequestParam String name) {
		return departmentRepository.findByNameContaining(name);
	}
	
	
	@GetMapping({"list_api/{page}/{size}/{field_sort}", "list_api"})
	public List<DepartmentDTO> list(@RequestParam(defaultValue = "", required = false) String search,
			@PathVariable(required = false) String page,
			@PathVariable(required = false) String size,
			@PathVariable(required = false, name="field_sort") String fieldSort) {
		
		int p = StringUtils.isEmpty(page) ? 1 : Integer.parseInt(page);
		int s = StringUtils.isEmpty(size) ? 10 : Integer.parseInt(size);
		fieldSort = StringUtils.isEmpty(fieldSort) ? "id" : fieldSort;
		
		Pageable paginationAndSorting = PageRequest.of(p-1, s, Sort.by(Direction.ASC, fieldSort));
		
		Page<DepartmentDTO> pages = departmentService.getAllDepartments(paginationAndSorting);
		List<DepartmentDTO> departments = new ArrayList<DepartmentDTO>();
				
		try {
			if(Integer.parseInt(search) <= 0) throw new NumberFormatException();
			if(departmentService.getDepartment(Integer.parseInt(search)) == null
					&& departmentService.searchByName("%"+ search +"%", paginationAndSorting) == null) {
				throw new NullPointerException();
			}
			departments.add(departmentService.getDepartment(Integer.parseInt(search)));
		} catch (NumberFormatException e) {
			pages = departmentService.searchByName("%"+ search +"%", paginationAndSorting);
			departments = pages.getContent();
		} catch (NullPointerException e) {
		}

		return departments;
	}
	
	@GetMapping("get_api")
	public DepartmentDTO get(@RequestParam int id) {
		return departmentService.getDepartment(id);
	}
	
	@PostMapping("add_api")
	public DepartmentDTO add(@RequestBody DepartmentDTO department) {
		Date currentDate = new Date();
		formatter.format(currentDate);
		department.setDateCreate(currentDate);
		departmentService.addDepartment(department);
		return department;
	}

	@PutMapping("edit_api")
	public void edit(@RequestBody DepartmentDTO department) throws ParseException {
		departmentService.updateDepartment(department);
	}
	
	@DeleteMapping("delete_api")
	public void delete(@RequestParam int id) {
		departmentService.deleteDepartment(id);
	}
	
}
